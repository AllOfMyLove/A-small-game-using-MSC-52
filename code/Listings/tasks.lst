C51 COMPILER V9.52.0.0   TASKS                                                             04/28/2020 23:04:11 PAGE 1   


C51 COMPILER V9.52.0.0, COMPILATION OF MODULE TASKS
OBJECT MODULE PLACED IN .\keilOut\tasks.obj
COMPILER INVOKED BY: C:\Program Files\Keil\C51\BIN\C51.EXE src\tasks.c OMF2 ROM(SMALL) OPTIMIZE(8,SIZE) BROWSE INCDIR(.\
                    -dependence;.\src) DEBUG PRINT(.\Listings\tasks.lst) OBJECT(.\keilOut\tasks.obj)

line level    source

   1          #include "reg52.h"
   2          #include "LCD_func.h"
   3          #include "keyboard_func.h"
   4          #include "interrupt_func.h"
   5          #include "random_func.h"
   6          #define uchar unsigned char
   7          void update(void);
   8          extern uchar random_num;
   9          
  10          uchar score = 0;                        // 记录得分
  11          
  12          /********************************************************************************************
  13                                                  延时500ms
  14          ********************************************************************************************/
  15          void delay500ms(void)
  16          {
  17   1          unsigned char a,b,c;
  18   1          for(c=23;c>0;c--)
  19   1              for(b=152;b>0;b--)
  20   1                  for(a=70;a>0;a--);
  21   1      }
  22          
  23          
  24          /********************************************************************************************
  25                                                  暂停与继续
  26          ********************************************************************************************/
  27          bit is_pause = 0;                       // 暂停时的标志位，is_pause = 1 表示处于暂停状态
  28          
  29          // INT1 中断，手动设置低优先级
  30          void pause() interrupt 2
  31          {
  32   1          P0 = 0x00;                          // LED 点阵熄灭
  33   1          is_pause = 1;                       // 更新标志位
  34   1          LCD_clear(0);
  35   1          LCD_display(0x80,"   PAUSE");       // 更新 LCD 显示屏
  36   1          init_random(TL1);                   // 重新获取随机数
  37   1          while(is_pause);                    // 当 "CONTINUE" 按下前，标志位一直为 1
  38   1                                              //  "CONTINUE" 按下后，标志位清零，退出无限循环，继续游戏
  39   1      }
  40          
  41          // INT0 中断，手动设置高优先级
  42          void continuee() interrupt 0
  43          {
  44   1          if (is_pause == 0)                  // 当之前没有按下"PAUSE"键，不做任何反应
  45   1              return;
  46   1          LCD_clear(0);                       // 更新显示屏并暂留
  47   1          LCD_display(0x80,"CONTINUE");
  48   1          delay500ms();
  49   1          LCD_display(0x80,"Score:     ");    // 显示屏恢复暂停前的状态
  50   1          LCD_display(0xC2,uchar2string(score));
  51   1          is_pause = 0;                       // 更新标志位，使之退出pause中断
  52   1      }
  53          
  54          
C51 COMPILER V9.52.0.0   TASKS                                                             04/28/2020 23:04:11 PAGE 2   

  55          /********************************************************************************************
  56                                                  正常运行
  57          ********************************************************************************************/
  58          // 正常情况每半秒钟更新
  59          void TIM_0_isr() interrupt 1
  60          {
  61   1          static uchar count = 0;             // 计数变量，当 count = 10 使表示半秒
  62   1          TH0 = (65536 - 50000) / 256;        // 定时器手动重装
  63   1          TL0 = (65536 - 50000) % 256;
  64   1          count++;
  65   1          if (count==10)                      // 半秒时间到
  66   1          {
  67   2              count = 0;                      // 清空标志位
  68   2              update();                       // 调用update函数，执行主逻辑
  69   2          }
  70   1      }
  71          
  72          // update 函数实现
  73          // 每半秒钟更新信息
  74          void update()
  75          {
  76   1          // 定义变量
  77   1          uchar i = 0, j = 0;                 // 循环变量
  78   1          static uchar error = 0;             // 错误次数
  79   1          
  80   1      
  81   1          uchar decode = 0;                   // 随机数所对应的键盘及点阵的编码
  82   1                                              //   eg). 0b 10111000  表示第三行第四列
  83   1      
  84   1          uchar code_dic[]                    /* 编码字典*/
  85   1              = {0xe1,0xb4,0xe2,0xb2,0xd1,0xd4,0xd8,0xe8,0x72,0xb1,0xb8,0x71,0xd2,0x74,0xe4,0x78};
  86   1      
  87   1          // 获取随机数，并获取随机数对应编码
  88   1          if(random_num<0 || random_num>15)
  89   1              random_num = 0;
  90   1          decode = code_dic[random_num];
  91   1      
  92   1          // 点亮点阵
  93   1          P0 = decode;
  94   1      
  95   1          // 连续扫描键盘，当检测到对应按键时，取得分数
  96   1          // 连续三次没有按对按键，结束游戏
  97   1          for (i=0;i<255;i++)
  98   1          {
  99   2              for (j=0;j<150;j++)
 100   2              {
 101   3                  if(decode == KEYBOARD_get_key())
 102   3                  {
 103   4                      score++;                // 检测到正确按键，更新分数
 104   4                      error = 0;              // 清空错误次数
 105   4                      P0 = 0x00;              // 关闭 LED 点阵
 106   4                      goto LABAL;             // 直接跳转到更新屏幕分数显示
 107   4                  }
 108   3              }
 109   2          }
 110   1          error++;
 111   1          if (error>3)
 112   1          {
 113   2              LCD_clear(0);                   // 清空LCD
 114   2              P0 = 0x00;                      // 关闭 LED 点阵
 115   2              LCD_display(0x80,"FAIL!");
 116   2              while(1);
C51 COMPILER V9.52.0.0   TASKS                                                             04/28/2020 23:04:11 PAGE 3   

 117   2          }
 118   1      
 119   1          // 刷新屏幕
 120   1          LABAL:LCD_display(0xC2,uchar2string(score));
 121   1      }


MODULE INFORMATION:   STATIC OVERLAYABLE
   CODE SIZE        =    395    ----
   CONSTANT SIZE    =     52    ----
   XDATA SIZE       =   ----    ----
   PDATA SIZE       =   ----    ----
   DATA SIZE        =      3      19
   IDATA SIZE       =   ----    ----
   BIT SIZE         =      1    ----
   EDATA SIZE       =   ----    ----
   HDATA SIZE       =   ----    ----
   XDATA CONST SIZE =   ----    ----
   FAR CONST SIZE   =   ----    ----
END OF MODULE INFORMATION.


C51 COMPILATION COMPLETE.  0 WARNING(S),  0 ERROR(S)
